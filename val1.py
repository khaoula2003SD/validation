{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": None,
   "id": "d35de89c-8dbe-4693-8f20-acd07439d102",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from scipy import stats\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Configuration de la page\n",
    "st.set_page_config(page_title=\"Analyse Exactitude/Incertitude\", layout=\"wide\")\n",
    "\n",
    "# ---------------- FONCTION 1 : Analyse ---------------- #\n",
    "def analyse_par_niveau(df, gamma=0.95, lambd=0.05):\n",
    "    grouped = df.groupby(\"Valeur certifi√©e Vc\")\n",
    "    results = {}\n",
    "\n",
    "    for niveau, group in grouped:\n",
    "        repetitions = group[[\"r√©p√©tition 1\", \"r√©p√©tition 2\", \"r√©p√©tition 3\"]].values.flatten()\n",
    "        valeurs = repetitions[~np.isnan(repetitions)]\n",
    "\n",
    "        n = len(valeurs)\n",
    "        if n < 2:\n",
    "            continue\n",
    "\n",
    "        m = np.mean(valeurs)\n",
    "        s = np.std(valeurs, ddof=1)\n",
    "        se = s / np.sqrt(n)\n",
    "\n",
    "        t_critique = stats.t.ppf(1 - (1 - gamma) / 2, df=n - 1)\n",
    "        k = stats.t.ppf(1 - lambd, df=n - 1)\n",
    "\n",
    "        l100 = 100 * ((m - t_critique * se) - m) / m\n",
    "        u100 = 100 * ((m + t_critique * se) - m) / m\n",
    "        L100 = 100 * ((m - k * s) - m) / m\n",
    "        U100 = 100 * ((m + k * s) - m) / m\n",
    "\n",
    "        erreur_relative = 100 * (m - niveau) / niveau\n",
    "\n",
    "        results[niveau] = {\n",
    "            \"l100\": l100,\n",
    "            \"u100\": u100,\n",
    "            \"L100\": L100,\n",
    "            \"U100\": U100,\n",
    "            \"Erreur relative\": erreur_relative,\n",
    "            \"n\": n\n",
    "        }\n",
    "    return results\n",
    "\n",
    "# ---------------- Plot exactitude ---------------- #\n",
    "def plot_exactitude(resultats, nom_element=\"√âl√©ment\"):\n",
    "    niveaux = list(resultats.keys())\n",
    "    L100 = [resultats[n][\"L100\"] for n in niveaux]\n",
    "    U100 = [resultats[n][\"U100\"] for n in niveaux]\n",
    "    erreur_relative = [resultats[n][\"Erreur relative\"] for n in niveaux]\n",
    "\n",
    "    plt.figure(figsize=(10, 5))\n",
    "    plt.plot(niveaux, L100, 'o-', color='orange', label=\"Limite basse tol√©rance (%)\")\n",
    "    plt.plot(niveaux, U100, 'o-', color='orange', label=\"Limite haute tol√©rance (%)\")\n",
    "    plt.plot(niveaux, erreur_relative, 'o-', color='black', label=\"Erreur relative (%)\")\n",
    "    plt.plot(niveaux, [-15]*len(niveaux), 'o--', color='gray', label=\"Acceptabilit√© min (%)\")\n",
    "    plt.plot(niveaux, [15]*len(niveaux), 'o--', color='gray', label=\"Acceptabilit√© max (%)\")\n",
    "    plt.xlabel(\"Valeur certifi√©e\")\n",
    "    plt.ylabel(\"Erreur relative (%)\")\n",
    "    plt.title(f\"Plan d'exactitude - {nom_element}\")\n",
    "    plt.grid(True)\n",
    "    plt.legend()\n",
    "    st.pyplot(plt.gcf())\n",
    "    plt.close()\n",
    "\n",
    "# ---------------- Plot incertitude ---------------- #\n",
    "def plot_incertitude(resultats, nom_element=\"√âl√©ment\"):\n",
    "    niveaux = list(resultats.keys())\n",
    "    l100 = [resultats[n][\"l100\"] for n in niveaux]\n",
    "    u100 = [resultats[n][\"u100\"] for n in niveaux]\n",
    "    erreur_relative = [resultats[n][\"Erreur relative\"] for n in niveaux]\n",
    "\n",
    "    plt.figure(figsize=(10, 5))\n",
    "    plt.plot(niveaux, l100, 'o-', color='green', label=\"Limite basse incertitude (%)\")\n",
    "    plt.plot(niveaux, u100, 'o-', color='green', label=\"Limite haute incertitude (%)\")\n",
    "    plt.plot(niveaux, erreur_relative, 'o-', color='black', label=\"Erreur relative (%)\")\n",
    "    plt.xlabel(\"Valeur certifi√©e\")\n",
    "    plt.ylabel(\"Incertitude (%)\")\n",
    "    plt.title(f\"Plan d'incertitude - {nom_element}\")\n",
    "    plt.grid(True)\n",
    "    plt.legend()\n",
    "    st.pyplot(plt.gcf())\n",
    "    plt.close()\n",
    "\n",
    "# ---------------- Interface Streamlit ---------------- #\n",
    "\n",
    "st.title(\"üìä Analyse d'exactitude et d'incertitude\")\n",
    "\n",
    "uploaded_file = st.file_uploader(\"üìÅ Charger un fichier CSV contenant les mesures\", type=\"csv\")\n",
    "\n",
    "if uploaded_file is not None:\n",
    "    df = pd.read_csv(uploaded_file)\n",
    "    st.subheader(\"Aper√ßu des donn√©es\")\n",
    "    st.write(df.head())\n",
    "\n",
    "    gamma = st.slider(\"Niveau de confiance gamma\", min_value=0.80, max_value=0.99, value=0.95, step=0.01)\n",
    "    lambd = st.slider(\"Niveau de couverture lambda\", min_value=0.01, max_value=0.20, value=0.05, step=0.01)\n",
    "    nom_element = st.text_input(\"Nom de l'√©l√©ment mesur√©\", value=\"√âl√©ment\")\n",
    "\n",
    "    if st.button(\"üîç Lancer l'analyse\"):\n",
    "        with st.spinner(\"Analyse en cours...\"):\n",
    "            resultats = analyse_par_niveau(df, gamma, lambd)\n",
    "            st.success(\"Analyse termin√©e ‚úÖ\")\n",
    "\n",
    "            st.subheader(\"üìà Plan d'exactitude\")\n",
    "            plot_exactitude(resultats, nom_element)\n",
    "\n",
    "            st.subheader(\"üìâ Plan d'incertitude\")\n",
    "            plot_incertitude(resultats, nom_element)\n",
    "\n",
    "            st.subheader(\"üßæ R√©sultats num√©riques\")\n",
    "            st.write(pd.DataFrame(resultats).T)\n",
    "\n",
    "else:\n",
    "    st.info(\"Veuillez importer un fichier CSV contenant les colonnes : `Valeur certifi√©e Vc`, `r√©p√©tition 1`, `r√©p√©tition 2`, `r√©p√©tition 3`.\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
