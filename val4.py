{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d35de89c-8dbe-4693-8f20-acd07439d102",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Analyse d'Exactitude & Incertitude - Multi-fichiers Design\n",
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from scipy import stats\n",
    "import matplotlib.pyplot as plt\n",
    "import io\n",
    "\n",
    "# --- Configuration de la page ---\n",
    "st.set_page_config(page_title=\"Analyse Exactitude & Incertitude\", layout=\"wide\")\n",
    "\n",
    "# --- Titre principal ---\n",
    "st.title(\"üî¨ Analyse d'Exactitude & d'Incertitude\")\n",
    "st.markdown(\"Cette application permet de t√©l√©verser plusieurs fichiers CSV correspondant √† diff√©rents √©l√©ments, puis d‚Äôanalyser l‚Äôexactitude et l‚Äôincertitude de leurs mesures.\")\n",
    "\n",
    "# --- Upload multiples fichiers ---\n",
    "uploaded_files = st.file_uploader(\"üìÇ T√©l√©versez les fichiers CSV pour chaque √©l√©ment :\", type=\"csv\", accept_multiple_files=True)\n",
    "\n",
    "if not uploaded_files:\n",
    "    st.info(\"Veuillez t√©l√©verser un ou plusieurs fichiers CSV pour commencer.\")\n",
    "    st.stop()\n",
    "\n",
    "# --- Lecture robuste de chaque fichier ---\n",
    "data_dict = {}\n",
    "\n",
    "def try_read_csv(content, encodings=[\"utf-8\", \"latin-1\"], sep=\";\"):\n",
    "    for enc in encodings:\n",
    "        try:\n",
    "            return pd.read_csv(io.StringIO(content.decode(enc)), sep=sep)\n",
    "        except Exception:\n",
    "            continue\n",
    "    return None\n",
    "\n",
    "for file in uploaded_files:\n",
    "    content = file.read()\n",
    "    df = try_read_csv(content)\n",
    "    if df is not None and \"Valeur certifi√©e Vc\" in df.columns:\n",
    "        for col in [\"r√©p√©tition 1\", \"r√©p√©tition 2\", \"r√©p√©tition 3\", \"Moyenne\"]:\n",
    "            if col in df.columns:\n",
    "                df[col] = df[col].astype(str).str.replace(\",\", \".\").astype(float)\n",
    "        data_dict[file.name] = df\n",
    "\n",
    "if not data_dict:\n",
    "    st.error(\"Aucun des fichiers ne contient des colonnes attendues ('Valeur certifi√©e Vc', 'r√©p√©titions', etc.).\")\n",
    "    st.stop()\n",
    "\n",
    "# --- Choix de l'√©l√©ment √† analyser ---\n",
    "choix_element = st.selectbox(\"üîç Choisissez un √©l√©ment √† analyser :\", list(data_dict.keys()))\n",
    "df = data_dict[choix_element]\n",
    "\n",
    "# --- Param√®tres utilisateur ---\n",
    "with st.sidebar:\n",
    "    st.header(\"‚öôÔ∏è Param√®tres d‚Äôanalyse\")\n",
    "    gamma = st.slider(\"Niveau de confiance Œ≥\", min_value=0.80, max_value=0.99, value=0.95, step=0.01)\n",
    "    lambd = st.slider(\"Param√®tre Œª\", min_value=0.01, max_value=0.2, value=0.05, step=0.01)\n",
    "    nom_element = st.text_input(\"Nom affich√© de l‚Äô√©l√©ment :\", choix_element.split('.')[0])\n",
    "\n",
    "# --- Fonction d‚Äôanalyse ---\n",
    "def analyse_par_niveau(df, gamma=0.95, lambd=0.05):\n",
    "    grouped = df.groupby(\"Valeur certifi√©e Vc\")\n",
    "    results = {}\n",
    "\n",
    "    for niveau, group in grouped:\n",
    "        repetitions = group[[\"r√©p√©tition 1\", \"r√©p√©tition 2\", \"r√©p√©tition 3\"]].values.flatten()\n",
    "        valeurs = repetitions[~np.isnan(repetitions)]\n",
    "\n",
    "        n = len(valeurs)\n",
    "        m = np.mean(valeurs)\n",
    "        s = np.std(valeurs, ddof=1)\n",
    "        se = s / np.sqrt(n)\n",
    "\n",
    "        t_critique = stats.t.ppf(1 - (1 - gamma) / 2, df=n - 1)\n",
    "        k = stats.t.ppf(1 - lambd, df=n - 1)\n",
    "\n",
    "        l100 = 100 * ((m - t_critique * se) - m) / m\n",
    "        u100 = 100 * ((m + t_critique * se) - m) / m\n",
    "        L100 = 100 * ((m - k * s) - m) / m\n",
    "        U100 = 100 * ((m + k * s) - m) / m\n",
    "\n",
    "        erreur_relative = 100 * (m - niveau) / niveau\n",
    "\n",
    "        results[niveau] = {\n",
    "            \"l100\": round(l100, 2),\n",
    "            \"u100\": round(u100, 2),\n",
    "            \"L100\": round(L100, 2),\n",
    "            \"U100\": round(U100, 2),\n",
    "            \"Erreur relative\": round(erreur_relative, 2),\n",
    "            \"n\": n\n",
    "        }\n",
    "    return results\n",
    "\n",
    "# --- Analyse ---\n",
    "st.markdown(\"---\")\n",
    "st.subheader(f\"üìä Analyse de l‚Äô√©l√©ment : **{nom_element}**\")\n",
    "\n",
    "resultats = analyse_par_niveau(df, gamma=gamma, lambd=lambd)\n",
    "\n",
    "# --- Fonctions de trac√© ---\n",
    "def plot_exactitude(resultats, nom_element=\"√âl√©ment\"):\n",
    "    niveaux = list(resultats.keys())\n",
    "    L100 = [resultats[n][\"L100\"] for n in niveaux]\n",
    "    U100 = [resultats[n][\"U100\"] for n in niveaux]\n",
    "    erreur_relative = [resultats[n][\"Erreur relative\"] for n in niveaux]\n",
    "\n",
    "    plt.figure(figsize=(10, 6))\n",
    "    plt.plot(niveaux, L100, 'o-', color='orange', label=\"Limite basse tol√©rance (%)\")\n",
    "    plt.plot(niveaux, U100, 'o-', color='orange', label=\"Limite haute tol√©rance (%)\")\n",
    "    plt.plot(niveaux, erreur_relative, 'o-', color='black', label=\"Erreur relative (%)\")\n",
    "    plt.axhline(-15, color='gray', linestyle='--', label=\"Acceptabilit√© min (%)\")\n",
    "    plt.axhline(15, color='gray', linestyle='--', label=\"Acceptabilit√© max (%)\")\n",
    "    plt.xlabel(\"Valeur certifi√©e\")\n",
    "    plt.ylabel(\"Erreur relative (%)\")\n",
    "    plt.title(f\"Plan d'exactitude - {nom_element}\")\n",
    "    plt.grid(True)\n",
    "    plt.legend()\n",
    "    st.pyplot(plt.gcf())\n",
    "\n",
    "def plot_incertitude(resultats, nom_element=\"√âl√©ment\"):\n",
    "    niveaux = list(resultats.keys())\n",
    "    l100 = [resultats[n][\"l100\"] for n in niveaux]\n",
    "    u100 = [resultats[n][\"u100\"] for n in niveaux]\n",
    "    erreur_relative = [resultats[n][\"Erreur relative\"] for n in niveaux]\n",
    "\n",
    "    plt.figure(figsize=(10, 6))\n",
    "    plt.plot(niveaux, l100, 'o-', color='green', label=\"Limite basse incertitude (%)\")\n",
    "    plt.plot(niveaux, u100, 'o-', color='green', label=\"Limite haute incertitude (%)\")\n",
    "    plt.plot(niveaux, erreur_relative, 'o-', color='black', label=\"Erreur relative (%)\")\n",
    "    plt.xlabel(\"Valeur certifi√©e\")\n",
    "    plt.ylabel(\"Incertitude (%)\")\n",
    "    plt.title(f\"Plan d'incertitude - {nom_element}\")\n",
    "    plt.grid(True)\n",
    "    plt.legend()\n",
    "    st.pyplot(plt.gcf())\n",
    "\n",
    "# --- Graphiques ---\n",
    "st.markdown(\"### üìâ Plan d‚Äôexactitude\")\n",
    "plot_exactitude(resultats, nom_element=nom_element)\n",
    "\n",
    "st.markdown(\"### üìà Plan d‚Äôincertitude\")\n",
    "plot_incertitude(resultats, nom_element=nom_element)\n",
    "\n",
    "# --- R√©sum√© tabulaire ---\n",
    "st.markdown(\"### üìã R√©sum√© des r√©sultats\")\n",
    "st.dataframe(pd.DataFrame(resultats).T)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
